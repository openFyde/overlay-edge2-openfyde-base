From dab41aceaf7ab8017f5daf82ec286aeb6d62779a Mon Sep 17 00:00:00 2001
From: Zhixiong Lin <zhixiong.lin@rock-chips.com>
Date: Mon, 21 Mar 2022 14:51:09 +0800
Subject: [PATCH] add create_mfi_pool_node() release

MAX_FILE_INODE is set 16

Signed-off-by: Zhixiong Lin <zhixiong.lin@rock-chips.com>
Change-Id: I9fcd7e35ca75058a4d871612f69297bc60a7b96e
---
 .../arm/bifrost/backend/gpu/mali_kbase_pm_driver.c | 26 +++++--
 .../context/backend/mali_kbase_context_csf.c       | 80 ++++++++++++++++++++++
 drivers/gpu/arm/bifrost/csf/mali_kbase_csf.c       | 14 ++--
 drivers/gpu/arm/bifrost/csf/mali_kbase_csf_defs.h  |  3 +
 .../bifrost/device/backend/mali_kbase_device_csf.c |  9 ++-
 5 files changed, 117 insertions(+), 15 deletions(-)

Index: linux/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
===================================================================
--- linux.orig/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
+++ linux/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
@@ -2509,21 +2509,22 @@ KBASE_EXPORT_TEST_API(kbase_pm_disable_i
 #if MALI_USE_CSF
 static void update_user_reg_page_mapping(struct kbase_device *kbdev)
 {
+	int i = 0;
 	lockdep_assert_held(&kbdev->pm.lock);
 
 	mutex_lock(&kbdev->csf.reg_lock);
 
-	/* Only if the mappings for USER page exist, update all PTEs associated to it */
-	if (kbdev->csf.nr_user_page_mapped > 0) {
-		if (likely(kbdev->csf.mali_file_inode)) {
+	for(i = 0; i < MAX_FILE_INODE; i++)
+	{
+		if (kbdev->csf.mfi_pool[i]) {
 			/* This would zap the pte corresponding to the mapping of User
 			 * register page for all the Kbase contexts.
 			 */
-			unmap_mapping_range(kbdev->csf.mali_file_inode->i_mapping,
-					    BASEP_MEM_CSF_USER_REG_PAGE_HANDLE, PAGE_SIZE, 1);
-		} else {
-			dev_err(kbdev->dev,
-				"Device file inode not exist even if USER page previously mapped");
+			//printk("rk-debug[%s %s %d] pid=%d  name:%s i_mapping:%p i=%d\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kbdev->csf.mfi_pool[i]->i_mapping,i); //kernel带进程名
+
+			unmap_mapping_range(kbdev->csf.mfi_pool[i]->i_mapping,
+					    BASEP_MEM_CSF_USER_REG_PAGE_HANDLE,
+					    PAGE_SIZE, 1);
 		}
 	}
 
Index: linux/drivers/gpu/arm/bifrost/context/backend/mali_kbase_context_csf.c
===================================================================
--- linux.orig/drivers/gpu/arm/bifrost/context/backend/mali_kbase_context_csf.c
+++ linux/drivers/gpu/arm/bifrost/context/backend/mali_kbase_context_csf.c
@@ -115,6 +115,73 @@ static void kbase_context_term_partial(
 	}
 }
 
+static int create_mfi_pool_node(struct kbase_device *kbdev,struct kbase_context *kctx)
+{
+	//printk("rk-debug[%s %s %d] pid=%d  name:%s kbdev:%p kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kbdev,kctx,kctx->filp->f_inode); //kernel带进程名
+
+	if (kctx->filp) {
+		int i = 0;
+		//printk("rk-debug[%s %s %d] pid=%d  name:%s kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx,kctx->filp->f_inode); //kernel带进程名
+
+        //查找是否mfi_pool中是否已有该f_inode
+		for(i = 0; i < MAX_FILE_INODE; i++)
+		{
+			if(kctx->filp->f_inode == kbdev->csf.mfi_pool[i])
+			{
+				//printk("rk-debug[%s %s %d] pid=%d  name:%s\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm); //kernel带进程名
+				kbdev->csf.mfi_pool_cached_counter[i]++;
+				return 0;
+			}
+		}
+
+		for(i = 0; i < MAX_FILE_INODE; i++)
+		{
+			if (!kbdev->csf.mfi_pool[i])
+			{
+				//printk("rk-debug[%s %s %d] pid=%d  name:%s mali_file_inode:%p f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kbdev->csf.mfi_pool[i],kctx->filp->f_inode); //kernel带进程名
+				kbdev->csf.mfi_pool[i] = kctx->filp->f_inode;
+				kbdev->csf.mfi_pool_cached_counter[i]++;
+				return 0;
+			}
+		}
+
+		printk("rk-debug[%s %s %d] pid=%d  name:%s out of MAX_FILE_INODE:%d\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,MAX_FILE_INODE); //kernel带进程名
+		return -1;
+	}
+
+	return 0;
+}
+
+static int destory_mfi_pool_node(struct kbase_device *kbdev,struct kbase_context *kctx)
+{
+	//printk("rk-debug[%s %s %d] pid=%d  name:%s kbdev:%p kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kbdev,kctx,kctx->filp->f_inode); //kernel带进程名
+
+	if (kctx->filp) {
+		int i = 0;
+		//printk("rk-debug[%s %s %d] pid=%d  name:%s kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx,kctx->filp->f_inode); //kernel带进程名
+
+        //查找是否mfi_pool中是否已有该f_inode
+		for(i = 0; i < MAX_FILE_INODE; i++)
+		{
+			if(kctx->filp->f_inode == kbdev->csf.mfi_pool[i])
+			{
+				kbdev->csf.mfi_pool_cached_counter[i]--;
+				if(kbdev->csf.mfi_pool_cached_counter[i] == 0)
+				{
+					//printk("rk-debug[%s %s %d] pid=%d  name:%s release all f_inode%p in mfi_pool\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx->filp->f_inode); //kernel带进程名
+					kbdev->csf.mfi_pool[i] = NULL;
+				}
+				return 0;
+			}
+        }
+
+		printk("rk-debug[%s %s %d] pid=%d  name:%s can't find f_inode:%p in mfi_pool[%d]s\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx->filp->f_inode,MAX_FILE_INODE); //kernel带进程名
+		return -1;
+	}
+
+	return 0;
+}
+
 struct kbase_context *kbase_create_context(struct kbase_device *kbdev,
 	bool is_compat,
 	base_context_create_flags const flags,
@@ -141,6 +208,12 @@ struct kbase_context *kbase_create_conte
 	kctx->filp = filp;
 	kctx->create_flags = flags;
 
+	//printk("rk-debug[%s %s %d] pid=%d  name:%s kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx,kctx->filp->f_inode); //kernel带进程名
+	if (WARN_ON(create_mfi_pool_node(kbdev,kctx)))
+	{
+		return NULL;
+	}
+
 	if (is_compat)
 		kbase_ctx_flag_set(kctx, KCTX_COMPAT);
 #if defined(CONFIG_64BIT)
@@ -183,6 +256,13 @@ void kbase_destroy_context(struct kbase_
 	if (WARN_ON(!kbdev))
 		return;
 
+	//printk("rk-debug[%s %s %d] pid=%d  name:%s kctx:%p filp->f_inode:%p\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,kctx,kctx->filp->f_inode); //kernel带进程名
+	if (WARN_ON(destory_mfi_pool_node(kbdev,kctx)))
+	{
+		return;
+	}
+
+
 	/* Context termination could happen whilst the system suspend of
 	 * the GPU device is ongoing or has completed. It has been seen on
 	 * Customer side that a hang could occur if context termination is
Index: linux/drivers/gpu/arm/bifrost/csf/mali_kbase_csf_defs.h
===================================================================
--- linux.orig/drivers/gpu/arm/bifrost/csf/mali_kbase_csf_defs.h
+++ linux/drivers/gpu/arm/bifrost/csf/mali_kbase_csf_defs.h
@@ -1472,6 +1472,7 @@ struct kbase_csf_dump_on_fault {
  * @fw_log:                 Contain members required for handling firmware log.
  * @dof:                    Structure for dump on fault.
  */
+#define MAX_FILE_INODE 16
 struct kbase_csf_device {
 	struct kbase_mmu_table mcu_mmu;
 	struct list_head firmware_interfaces;
@@ -1487,6 +1488,8 @@ struct kbase_csf_device {
 	struct tagged_addr dummy_user_reg_page;
 	u32 nr_user_page_mapped;
 	struct inode *mali_file_inode;
+	struct inode *mfi_pool[MAX_FILE_INODE];
+	int mfi_pool_cached_counter[MAX_FILE_INODE];
 	struct mutex reg_lock;
 	wait_queue_head_t event_wait;
 	bool interrupt_received;
Index: linux/drivers/gpu/arm/bifrost/device/backend/mali_kbase_device_csf.c
===================================================================
--- linux.orig/drivers/gpu/arm/bifrost/device/backend/mali_kbase_device_csf.c
+++ linux/drivers/gpu/arm/bifrost/device/backend/mali_kbase_device_csf.c
@@ -357,7 +357,14 @@ static void kbase_device_term_partial(st
 
 void kbase_device_term(struct kbase_device *kbdev)
 {
-	kbdev->csf.mali_file_inode = NULL;
+	int i = 0;
+	for(i = 0; i < MAX_FILE_INODE; i++)
+	{
+		//printk("rk-debug[%s %s %d] pid=%d  name:%s i=%d\n",__FILE__,__FUNCTION__,__LINE__,current->pid,current->comm,i); //kernel带进程名
+		kbdev->csf.mfi_pool[i] = NULL;
+		kbdev->csf.mfi_pool_cached_counter[i] = 0;
+	}
+
 	kbase_device_term_partial(kbdev, ARRAY_SIZE(dev_init));
 	kbase_mem_halt(kbdev);
 }
Index: linux/drivers/gpu/arm/bifrost/mali_kbase_mem_linux.c
===================================================================
--- linux.orig/drivers/gpu/arm/bifrost/mali_kbase_mem_linux.c
+++ linux/drivers/gpu/arm/bifrost/mali_kbase_mem_linux.c
@@ -3587,13 +3587,6 @@ static void kbase_csf_user_reg_vm_close(
 		dev_warn(kctx->kbdev->dev, "user_reg_vma pointer unexpectedly NULL");
 
 	kctx->csf.user_reg_vma = NULL;
-
-	mutex_lock(&kctx->kbdev->csf.reg_lock);
-	if (unlikely(kctx->kbdev->csf.nr_user_page_mapped == 0))
-		dev_warn(kctx->kbdev->dev, "Unexpected value for the USER page mapping counter");
-	else
-		kctx->kbdev->csf.nr_user_page_mapped--;
-	mutex_unlock(&kctx->kbdev->csf.reg_lock);
 }
 
 /**
@@ -3720,17 +3713,6 @@ static int kbase_csf_cpu_mmap_user_reg_p
 
 	kctx->csf.user_reg_vma = vma;
 
-	mutex_lock(&kbdev->csf.reg_lock);
-	kbdev->csf.nr_user_page_mapped++;
-
-	if (!kbdev->csf.mali_file_inode)
-		kbdev->csf.mali_file_inode = kctx->filp->f_inode;
-
-	if (unlikely(kbdev->csf.mali_file_inode != kctx->filp->f_inode))
-		dev_warn(kbdev->dev, "Device file inode pointer not same for all contexts");
-
-	mutex_unlock(&kbdev->csf.reg_lock);
-
 	vma->vm_ops = &kbase_csf_user_reg_vm_ops;
 	vma->vm_private_data = kctx;
 
